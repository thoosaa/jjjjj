@page "/play"
@using Share.Models
@inject IGameService GameService
@inject NavigationManager NavigationManager

<h3>Игра в Свинью</h3>

@if (game != null)
{
    <h4>Текущий игрок: @game.GetCurrentPlayer().Name</h4>
    <p>Текущий счет: @game.GetCurrentPlayer().Score.TotalScore</p>
    <p>Очки за ход: @game.GetCurrentPlayer().Score.TurnScore</p>
    <p>@message</p>

    <button @onclick="() => HandleGameAction(GameAction.RollDice)" class="btn btn-primary">Бросить кости</button>
    <button @onclick="() => HandleGameAction(GameAction.BankPoints)" class="btn btn-success">Сохранить очки</button>

    <h5>Результаты игры:</h5>
    <ul>
        @foreach (var player in game.GetPlayers())
        {
            <li>@player.Name: @player.Score.TotalScore</li>
        }
    </ul>
}
else
{
    <p>Загрузка игры...</p>
}

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string GameId { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    [Parameter]
    public string Username { get; set; } = string.Empty;

    private PigGame? game;
    private string message = string.Empty;
    private IDisposable? _rollResultSubscription;
    private IDisposable? _bankResultSubscription;
    private IDisposable? _finishSubscription;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GameService.ConnectToHub();
            SubscribeToHubEvents();

            game = await FetchGameState(GameId);
        }
        catch (Exception ex)
        {
            message = $"Ошибка: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task<PigGame?> FetchGameState(string gameId)
    {
        try
        {
            return await GameService.GetGameState(gameId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при получении состояния игры: {ex.Message}");
            return null;
        }
    }

    private void SubscribeToHubEvents()
    {
        _rollResultSubscription = GameService.CreateConnection("ReceiveRollResult", UpdateMessage);
        _bankResultSubscription = GameService.CreateConnection("ReceiveBankResult", UpdateMessage);
        _finishSubscription = GameService.CreateConnection("Finish", winner => NavigateToResults(winner));
    }

    private async Task HandleGameAction(GameAction action)
    {
        try
        {
            switch (action)
            {
                case GameAction.RollDice:
                    message = await GameService.RollDice(GameId);
                    break;

                case GameAction.BankPoints:
                    message = await GameService.BankPoints(GameId);
                    break;

                default:
                    throw new InvalidOperationException("Неизвестное действие.");
            }

            await CheckGameOver();
        }
        catch (Exception ex)
        {
            message = $"Ошибка: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task CheckGameOver()
    {
        if (game?.IsGameOver == true)
        {
            await GameService.EndGame(GameId, game.GetCurrentPlayer().Name);
            NavigateToResults(game.GetCurrentPlayer().Name);
        }
    }

    private void UpdateMessage(string result)
    {
        message = result;
        StateHasChanged();
    }

    private void NavigateToResults(string winner)
    {
        NavigationManager.NavigateTo($"/results?GameId={GameId}&Username={winner}");
    }

    public void Dispose()
    {
        _rollResultSubscription?.Dispose();
        _bankResultSubscription?.Dispose();
        _finishSubscription?.Dispose();
    }
}